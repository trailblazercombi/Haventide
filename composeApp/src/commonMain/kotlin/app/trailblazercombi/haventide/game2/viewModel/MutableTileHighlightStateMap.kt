package app.trailblazercombi.haventide.game2.viewModel

import app.trailblazercombi.haventide.game2.data.tilemap.TileData
import app.trailblazercombi.haventide.game2.jetpack.gamescreen.tilemap.Tile
import app.trailblazercombi.haventide.resources.UniversalColorizer
import kotlinx.coroutines.flow.MutableStateFlow

/**
 * A supporting class that maps the click states of individual tiles.
 * The @Composable [Tile] drinks StateFlows generated by this as States.
 *
 * This is the Mutable variant, used primarily for creation and collection of those states.
 * Then, it gets turned into a new [TileHighlightStateMap] (immutable).
 */
class MutableTileHighlightStateMap : HighlightStateMapForTiles {

    private val data: MutableMap<TileData, Pair<MutableStateFlow<UniversalColorizer>, MutableStateFlow<UniversalColorizer>>>

    @Suppress("ConvertSecondaryConstructorToPrimary")
    constructor(data: MutableMap<TileData, Pair<MutableStateFlow<UniversalColorizer>, MutableStateFlow<UniversalColorizer>>> = mutableMapOf()) {
        this.data = data
    }

    fun put(
        tile: TileData?,
        initClick: UniversalColorizer = UniversalColorizer.NO_INTERACTIONS_WITH_OUTLINE,
        initHighlight: UniversalColorizer = UniversalColorizer.NO_INTERACTIONS
    ) {
        if (tile == null) return
        data[tile] = Pair(MutableStateFlow(initClick), MutableStateFlow(initHighlight))
    }

    fun remove(tile: TileData) { data.remove(tile) }

    override fun getClick(tile: TileData) = data[tile]?.first
    override fun getHighlight(tile: TileData) = data[tile]?.second
    override fun setClick(tile: TileData, newClick: UniversalColorizer) { getClick(tile)?.value = newClick }
    override fun setHighlight(tile: TileData, newHighlight: UniversalColorizer) { getHighlight(tile)?.value = newHighlight }
    override fun toTileStateMap() = TileHighlightStateMap(data)
    override fun toMutableTileStateMap(): MutableTileHighlightStateMap = MutableTileHighlightStateMap(data)
    override fun unpack() = data.toMap()
}
