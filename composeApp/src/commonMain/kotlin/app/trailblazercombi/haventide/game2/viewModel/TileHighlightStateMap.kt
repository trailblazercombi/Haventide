package app.trailblazercombi.haventide.game2.viewModel

import app.trailblazercombi.haventide.game2.data.tilemap.TileData
import app.trailblazercombi.haventide.game2.jetpack.gamescreen.tilemap.Tile
import app.trailblazercombi.haventide.resources.UniversalColorizer
import kotlinx.coroutines.flow.MutableStateFlow

/**
 * A supporting class that maps the click states of individual tiles.
 * The @Composable [Tile] drinks StateFlows generated by this as States.
 *
 * This is the Immutable variant.
 */
class TileHighlightStateMap : HighlightStateMapForTiles {
    val data: Map<TileData, Pair<MutableStateFlow<UniversalColorizer>, MutableStateFlow<UniversalColorizer>>>

    @Suppress("ConvertSecondaryConstructorToPrimary")
    constructor(data: Map<TileData, Pair<MutableStateFlow<UniversalColorizer>, MutableStateFlow<UniversalColorizer>>>) {
        this.data = data
    }

    override fun getClick(tile: TileData) = data[tile]?.first
    override fun getHighlight(tile: TileData) = data[tile]?.second
    override fun setClick(tile: TileData, newClick: UniversalColorizer) { getClick(tile)?.value = newClick }
    override fun setHighlight(tile: TileData, newHighlight: UniversalColorizer) { getHighlight(tile)?.value = newHighlight }
    override fun toTileStateMap() = TileHighlightStateMap(data)
    override fun toMutableTileStateMap(): MutableTileHighlightStateMap = MutableTileHighlightStateMap(data.toMutableMap())
    override fun unpack() = data.toMap()
}
